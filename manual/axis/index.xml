<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>axis on ecmccfg</title><link>https://paulscherrerinstitute.github.io/ecmccfg/manual/axis/</link><description>Recent content in axis on ecmccfg</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://paulscherrerinstitute.github.io/ecmccfg/manual/axis/index.xml" rel="self" type="application/rss+xml"/><item><title>axis yaml configuration</title><link>https://paulscherrerinstitute.github.io/ecmccfg/manual/axis/axisyaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paulscherrerinstitute.github.io/ecmccfg/manual/axis/axisyaml/</guid><description>Since ecmccfg v7, the axis configuration is based on yaml files. Backwards compatibility for classic EPICS environment variable based configuration is assured for legacy systems.
yaml is - like python - indentation sensitive!
Indent with 2 spaces.
introduction python 3.x is required
The config is processed by a python script with a jinja2 backend. The processor will complain if mandatory keys are missing. Likewise, missing optional keys are populated with default values.</description></item><item><title>axis PLC</title><link>https://paulscherrerinstitute.github.io/ecmccfg/manual/axis/axisplc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paulscherrerinstitute.github.io/ecmccfg/manual/axis/axisplc/</guid><description>introduction Each axis can have a native PLC. This PLC can be e.g. used for interlocking or synchronisation. The axis PLC is part of the yaml config. The code can be provided inline or in a separate file.
inline plc: enable: yes externalCommands: yes code: - ax3.enc.actpos:=(ax1.enc.actpos+ax2.enc.actpos)/2 filter: velocity: enable: yes size: 100 trajectory: enable: yes size: 100 file plc: enable: yes externalCommands: yes file: cfg/heave.plc filter: velocity: enable: yes size: 100 trajectory: enable: yes size: 100 This is the respective plc file</description></item><item><title>axis scaling</title><link>https://paulscherrerinstitute.github.io/ecmccfg/manual/axis/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paulscherrerinstitute.github.io/ecmccfg/manual/axis/scaling/</guid><description>By popular demand, the topic scaling will be discusses in closer detail.
ECMC has to scaling factors for each joint, firstly the drive scaling, secondly the encoder scaling.
Changes to the scaling have direct effects on the Kp of the PID-loop. If the drive scaling is changes, make sure to adjust the PID parameters accordingly.
drive scaling Drive scaling deals with the relation of the drive output (typically a 16- or 32-bit register) to axis velocity.</description></item></channel></rss>